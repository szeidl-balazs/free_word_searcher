{"version":3,"sources":["ColorCard/Card.js","ColorCard/ListOfCards.js","Searchbar/Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["Div","styled","div","props","theme","backgroundColor","defaultProps","color","Card","hex","name","CardList","search","useState","results","setResults","useEffect","colors","filter","toLowerCase","includes","className","map","index","key","Input","input","Searchbar","setSearch","onChange","event","target","value","autoFocus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+/QAGA,IAAMA,EAAMC,IAAOC,IAAV,KAKa,SAACC,GAAD,OAAWA,EAAMC,MAAMC,mBAClC,SAACF,GAAD,MACyB,YAAhCA,EAAMC,MAAMC,gBAAgC,QAAU,WAG1DL,EAAIM,aAAe,CACjBF,MAAO,CAAEG,MAAO,SAAUF,gBAAiB,SAmD9BG,MAhDf,YAAyB,IAATD,EAAQ,EAARA,MAGNH,EAAQ,CACZC,gBAAiBE,EAAME,KAGzB,OACE,kBAAC,IAAD,CAAeL,MAAOA,GACpB,kBAACJ,EAAD,KACE,4BAAKO,EAAMG,S,QCyBNC,EA/CC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAAY,EAEEC,mBAAS,IAFX,mBAErBC,EAFqB,KAEZC,EAFY,KAY5B,OARAC,qBAAU,WACRD,EAAWE,EAAOC,QAChB,SAACX,GAAD,OACEA,EAAMG,KAAKS,cAAcC,SAASR,EAAOO,gBACzCZ,EAAME,IAAIU,cAAcC,SAASR,EAAOO,qBAC1C,CAACP,IAIH,yBAAKS,UAAU,aACZP,EAAQQ,KAAI,SAACf,EAAOgB,GAAR,OACX,kBAAC,EAAD,CAAMC,IAAKD,EAAOhB,MAAOA,S,2PChB/B,IAAMkB,EAAQxB,IAAOyB,MAAV,KAsEEC,MA1Db,YAAyC,IAArBf,EAAoB,EAApBA,OAAQgB,EAAY,EAAZA,UAY1B,OAVAZ,qBAAU,WACRY,EAAUhB,KACT,CAACA,EAAQgB,IASV,6BACE,kBAACH,EAAD,CAAOI,SAPa,SAACC,GACvBF,EAAUE,EAAMC,OAAOC,QAMaC,WAAS,MC4BpCC,EArDH,WAAO,IAAD,EAEYrB,mBAAS,IAFrB,mBAETD,EAFS,KAEDgB,EAFC,KAahB,OACE,6BACE,2EACA,kBAAC,EAAD,CAAWhB,OAAQA,EAAQgB,UAAWA,IACtC,kBAAC,EAAD,CAAUhB,OAAQA,MCVJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bb795885.chunk.js","sourcesContent":["import React/*, { Component }*/ from \"react\";\r\nimport styled, { ThemeProvider } from \"styled-components\";\r\n\r\nconst Div = styled.div`\r\n  width: 100%;\r\n  height: 150px;\r\n  border: 1px solid black;\r\n  box-shadow: 2px 2px 5px #000000;\r\n  background-color: ${(props) => props.theme.backgroundColor};\r\n  color: ${(props) =>\r\n    props.theme.backgroundColor === \"#000000\" ? \"white\" : \"black\"};\r\n`;\r\n\r\nDiv.defaultProps = {\r\n  theme: { color: 0xffffff, backgroundColor: \"#fff\" },\r\n};\r\n\r\nfunction Card ({color}) { \r\n  \r\n\r\n    const theme = {\r\n      backgroundColor: color.hex,\r\n    };\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Div>\r\n          <h1>{color.name}</h1>\r\n        </Div>\r\n      </ThemeProvider>\r\n    );\r\n}\r\n\r\n/*class Card extends Component {\r\n  Div = styled.div`\r\n    width: 100%;\r\n    height: 150px;\r\n    border: 1px solid black;\r\n    box-shadow: 2px 2px 5px #000000;\r\n    background-color: ${(props) => props.theme.backgroundColor};\r\n    color: ${(props) =>\r\n      props.theme.backgroundColor === \"#000000\" ? \"white\" : \"black\"};\r\n  `;\r\n\r\n  componentWillMount() {\r\n    this.Div.defaultProps = {\r\n      theme: { color: 0xffffff, backgroundColor: \"#fff\" },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const theme = {\r\n      backgroundColor: this.props.color.hex,\r\n    };\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <this.Div>\r\n          <h1>{this.props.color.name}</h1>\r\n        </this.Div>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}*/\r\n\r\n\r\nexport default Card;\r\n","import React, { /*Component,*/ useState, useEffect } from \"react\";\r\nimport Card from \"./Card.js\";\r\nimport colors from \"../data/colors.json\";\r\n\r\n\r\nconst CardList =({search}) => {\r\n\r\n  const [results, setResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setResults(colors.filter(\r\n      (color) =>\r\n        color.name.toLowerCase().includes(search.toLowerCase()) ||\r\n        color.hex.toLowerCase().includes(search.toLowerCase())\r\n  ))},[search]);\r\n  \r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {results.map((color, index) => (\r\n        <Card key={index} color={color} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n/*class CardList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      results: [],\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.search !== this.props.search) {\r\n      const results = colors.filter((color) => color.name.includes(this.props.search) || color.hex.includes(this.props.search));\r\n      this.setState({ results });      \r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.state.results.map((color, index) => (\r\n          <Card key={index} color={color} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}*/\r\n\r\nexport default CardList;\r\n","import React, { /*Component,*/ useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n//Az input tag a komponens a style componentsben (egy object) van tag formájában előkészítve, onnét van behivatkozva ide\r\n  const Input = styled.input`\r\n  margin: 10px auto;\r\n  background: linear-gradient(\r\n    90deg,\r\n    rgba(3, 4, 147, 1) 0%,\r\n    rgba(9, 9, 121, 1) 35%,\r\n    rgba(0, 212, 255, 1) 100%\r\n  );\r\n  color: yellow;\r\n  `;\r\n\r\n\r\n  function Searchbar({search, setSearch}) {\r\n\r\n    useEffect(() => {    \r\n      setSearch(search);\r\n    }, [search, setSearch]);\r\n\r\n    //esemény figyelő a input mező értékeinek a figyelésére\r\n    const onChangeHandler = (event) => {\r\n      setSearch(event.target.value);\r\n    };\r\n    \r\n    //input mező szabadszavas kereséshez, a komponens a style componentsben (egy object) van tag formájában előkészítve, onnét van behivatkozva ide\r\n    return (\r\n      <div>\r\n        <Input onChange={onChangeHandler} autoFocus /> \r\n      </div>\r\n    );\r\n\r\n  }  \r\n  \r\n\r\n/*class Searchbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: \"\",\r\n    };\r\n  }\r\n\r\n  Input = styled.input`\r\n    margin: 10px auto;\r\n    background: linear-gradient(\r\n      90deg,\r\n      rgba(3, 4, 147, 1) 0%,\r\n      rgba(9, 9, 121, 1) 35%,\r\n      rgba(0, 212, 255, 1) 100%\r\n    );\r\n    color: yellow;\r\n  `;\r\n\r\n  componentDidUpdate(preProps, prevState) {\r\n    if (prevState.search !== this.state.search)\r\n      this.props.search({ search: this.state.search });\r\n  }\r\n\r\n  onChangeHandler = (event) => {\r\n    this.setState({ search: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <this.Input onChange={this.onChangeHandler} autoFocus />\r\n      </div>\r\n    );\r\n  }\r\n}*/\r\n\r\nexport default Searchbar;\r\n","import React, { /*Component,*/ useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport CardList from \"./ColorCard/ListOfCards.js\";\r\nimport Searchbar from \"./Searchbar/Searchbar.js\";\r\n\r\nconst App = () => {\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  /*welcome üzenetet jeleníti meg felugró ablakban az oldal betöltésekor\r\n  useEffect(() => {\r\n    document.addEventListener('click', welcome);\r\n  });\r\n\r\n  const welcome = () => {\r\n    alert(\"Hello!\");\r\n  };  */\r\n\r\n  return (\r\n    <div>\r\n      <h3>Start typing the searched color in English!</h3>\r\n      <Searchbar search={search} setSearch={setSearch} />\r\n      <CardList search={search} />\r\n    </div>\r\n  );\r\n}\r\n\r\n/*class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: \"\",\r\n    };\r\n    this.setState = this.setState.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"click\", this.welcome);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"click\", this.welcome);\r\n  }\r\n\r\n  welcome = () => {\r\n    alert(\"Hello!\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Searchbar search={this.setState} />\r\n        <CardList search={this.state.search} />\r\n      </div>\r\n    );\r\n  }\r\n}*/\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}